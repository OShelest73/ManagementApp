@page "/"
@using ManagementAppUI.Models
@using ManagementAppUI.Authentication
@using System.Text
@using System.Security.Cryptography
@inject IJSRuntime js
@inject IUserData userData
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<h1 class="page-heading text-uppercase mb-4">Log In</h1>
<div class="row justify-content-center create-form">
    <div class="col-xl-8 col-lg-10 form-layout">
        <EditForm Model="@user" OnValidSubmit="Authenticate">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="input-section">
                <label class="form-label fw-bold text-uppercase" for="user-email">Enter email adress</label>
                <div class="input-description">Email adress</div>
                <InputText class="form-control" id="user-email" @bind-Value="user.EmailAdress" />
            </div>
            <div class="input-section">
                <label class="form-label fw-bold text-uppercase" for="password">Password</label>
                <div class="input-description">Enter the password</div>
                <InputText class="form-control" type="password" id="password" @bind-Value="user.Password" />
            </div>
            <div class="center-children">
                <button class="btn btn-main btn-lg text-uppercase" type="submit">Log In</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private LoginUserModel user = new();
    private bool isRepeated = false;
    private UserModel userAccount = new();

    private string AssemblePassword(string password, string salt)
    {
        var saltBytes = Convert.FromBase64String(salt);
        var rfc2898DeriveBytes = new Rfc2898DeriveBytes(password, saltBytes, 1000);
        return Convert.ToBase64String(rfc2898DeriveBytes.GetBytes(128));
    }

    private async Task Authenticate()
    {
        userAccount = await userData.FindUserAccount(user.EmailAdress);
        if (userAccount == null || AssemblePassword(user.Password, userAccount.Salt) != userAccount.Password)
        {
            await js.InvokeVoidAsync("alert", "Invalid email or password");
            return;
        }

        userAccount = await userData.FindUserInformation(user.EmailAdress);
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = userAccount.EmailAdress,
                Role = userAccount.Category
            });
        navManager.NavigateTo("/Tasks", true, true);
    }
}
